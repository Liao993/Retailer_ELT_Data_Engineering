services:
  source_postgres:
    container_name: source_postgres_container
    image: postgres:15
    ports:
      - "5433:5432"
    networks:
      - elt_network
    environment:
      POSTGRES_DB: "${SOURCE_DB}"
      POSTGRES_USER: "${SOURCE_USER}"
      POSTGRES_PASSWORD: "${SOURCE_PASSWORD}"
    volumes:
      - ./source_db_init/init.sql:/docker-entrypoint-initdb.d/init.sql

  destination_postgres:
    container_name: destination_postgres_container
    image: postgres:15
    ports:
      - "5434:5432"
    networks:
      - elt_network
    environment:
      POSTGRES_DB: "${DESTINATION_DB}"
      POSTGRES_USER: "${DESTINATION_USER}"
      POSTGRES_PASSWORD: "${DESTINATION_PASSWORD}"

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    ports:
      - "5050:80" # Expose PGAdmin 4 on port 5050 (adjust as needed)
    environment:
      PGADMIN_DEFAULT_EMAIL: "${PGADMIN_EMAIL}" # Set your desired admin email
      PGADMIN_DEFAULT_PASSWORD: "${PGADMIN_PASSWORD}" # Set your desired admin password
    depends_on:
      - source_postgres # Optional: If you want PGAdmin to connect to your source database
      - destination_postgres # Optional: If you want PGAdmin to connect to your destination database
    networks:
      - elt_network

  elt_script:
    build:
      context: ./elt_script # Directory containing the Dockerfile and elt_script.py
      dockerfile: Dockerfile # Name of the Dockerfile, if it's something other than "Dockerfile", specify here
    command: ["python", "elt_script.py"]
    container_name: elt_script_container
    environment:
      SOURCE_DB: "${SOURCE_DB}"
      SOURCE_USER: "${SOURCE_USER}"
      SOURCE_PASSWORD: "${SOURCE_PASSWORD}"
      DESTINATION_DB: "${DESTINATION_DB}" # Add this line
      DESTINATION_USER: "${DESTINATION_USER}" # Add this line
      DESTINATION_PASSWORD: "${DESTINATION_PASSWORD}" # Add this line
    depends_on:
      - source_postgres
      - destination_postgres
    networks:
      - elt_network

  dbt_server:
    image: ghcr.io/dbt-labs/dbt-postgres:latest
    container_name: dbt_container
    command: ["run", "--profiles-dir", "/root", "--project-dir", "/dbt"]
    networks:
      - elt_network
    volumes:
      - ./custom_postgres_dbt:/dbt
      - ~/.dbt:/root
    depends_on:
      - elt_script
    environment:
      DBT_PROFILE: "${DBT_PROFILE}"
      DBT_TARGET: "${DBT_TARGET}"

  airflow_postgres:
    image: postgres:latest
    networks:
      - elt_network
    environment:
      POSTGRES_DB: "${AIRFLOW_DB}"
      POSTGRES_USER: "${AIRFLOW_USER}"
      POSTGRES_PASSWORD: "${AIRFLOW_PASSWORD}"

  init-airflow:
    image: apache/airflow:latest
    depends_on:
      - airflow_postgres
    networks:
      - elt_network
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: "${AIRFLOW_CONN}"
    env_file:
      - .env
    command: >
      bash -c "${AIRFLOW_DB_INIT} && ${AIRFLOW_USER_CREATE}"

  webserver:
    build:
      context: .
      dockerfile: Dockerfile
    user: root
    depends_on:
      - airflow_postgres
    networks:
      - elt_network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./elt_script:/opt/airflow/elt_script
      - ./custom_postgres_dbt:/opt/dbt
      - ~/.dbt:/root/.dbt
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - .env
    ports:
      - "${AIRFLOW_WEB_SERVER_PORT}:8080"
    command: webserver

  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    user: root
    depends_on:
      - airflow_postgres
    networks:
      - elt_network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
        - ./elt_script:/opt/airflow/elt_script
      - ./custom_postgres_dbt:/opt/dbt
      - ~/.dbt:/root/.dbt
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - .env
    ports:
      - "${AIRFLOW_WEB_SERVER_PORT}:8080"
    command: scheduler

networks:
  elt_network:
    driver: bridge
